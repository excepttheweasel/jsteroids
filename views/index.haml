!!! Strict
%html
  %head
    %title jsteroids
    %script{:src => './raphael-min.js'}
    %script{:src => './jquery-1.4.4.min.js'}
%style
  :sass
    h1, h2, p, a
      color: #fff
      font-family: 'Helvetica'
      margin: 0 auto
      margin-top: 1em
      width: 600px

    h1
      font-size: 32px

    h2
      font-size: 14px

    body
      background: black

    #canvas
      margin: 0 auto
      width: 800px
      height: 600px
      text-align: center
      background: white
      -moz-border-radius: 4px
      -webkit-border-radius: 4px
      

%body
  %h1 jsteroids
  %h2 Asteroids clone written in Javascript with the Raphaël—JavaScript Library and jQuery.
  %br
  #canvas
  %p
    %a{:href => 'http://github.com/excepttheweasel/jsteroids'} Full source code

:javascript
  var g_width = 800;
  var g_height = 600;
  var paper = Raphael('canvas', g_width, g_height);

  // Calculate if two boxes are colliding
  function collision(box1, box2, radius) {
    var x1 = box1.x + (box1.width / 2);
    var y1 = box1.y + (box1.height / 2);
    var x2 = box2.x + (box2.width / 2);
    var y2 = box2.y + (box2.height / 2);
    var length = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    return length < radius;
  }

  // Find the middle of a box
  function middle(box) {
    return {x: box.x + (box.width / 2), y: box.y + (box.height / 2)};
  }

  // Generate a rough edges circular style shape (explosion, asteroid etc)
  // using SVG path notation format
  function kibble(points, size) {
    var path = 'M';
    var firstx, firsty;
    for(var angle = 0; angle <= Math.PI * 2; angle += (Math.PI / points)) {
      var radius = (size * 0.6) + Math.random() * (size * 0.4);
      var x = Math.cos(angle) * radius;
      var y = Math.sin(angle) * radius;
      if(angle == 0) {
        firstx = x;
        firsty = y;
        path += x + ' ' + y;
      } else {
        path += 'L' + x + ' ' + y;
      }
    }
    path += 'L' + firstx + ' ' + firsty;
    return paper.path(path);
  }

  // Missiles!
  var Missile = function(x, y, angle) {
    this.gfx = paper.circle(x, y, 3);
    this.speed = 5;
    this.angle = angle;
  };
  Missile.prototype = {
    think: function() {
      var rotation = (this.angle / 180) * Math.PI;
      var x = Math.cos(rotation) * this.speed;
      var y = Math.sin(rotation) * this.speed;
      this.gfx.translate(x, y);

      var bbox = this.gfx.getBBox();
      if(bbox.x < 0 || bbox.x > g_width || bbox.y < 0 || bbox.y > g_height) {
        this.gfx.hide();
        return false;
      }
      return true;
    }
  };

  // Explosions
  var Explosion = function(x, y, size) {
    this.bitcount = 3 + Math.random() * 7;
    this.shards = [];
    for(var index = 0; index < this.bitcount; index++) {
      var shard = {
        gfx: kibble(Math.random() * 5, size / 2),
        angle: Math.random() * Math.PI * 2,
        speed: Math.random() * 5,
      }
      // Positon the shards around the interior of the asteroid
      var angle = Math.random() * (Math.PI * 2);
      shard.gfx.translate(x + Math.cos(angle) * (size / 2), y + Math.sin(angle) * (size / 2));
      this.shards.push(shard);
    }
    this.lifetime = (size * 0.6) + Math.random() * (size * 0.4);
    this.life = this.lifetime;
  }
  Explosion.prototype = {
    think: function() {
      if(this.life-- > 0) {
        var color = parseInt(250 * (1 - (this.life / this.lifetime)));
        $(this.shards).each(function(index, shard) {
          var x = Math.cos(shard.angle) * shard.speed;
          var y = Math.sin(shard.angle) * shard.speed;
          shard.gfx.translate(x, y);
          shard.gfx.attr({stroke: "rgb(" + color + ", " + color + ", " + color + ")"});
        });
        return true;
      } else {
        $(this.shards).each(function(index, shard) {
          shard.gfx.hide();
        });
      }
      return false;
    }
  };

  // Asteroids
  var Asteroid = function() {
    this.size = 20 + Math.random() * 50;
    this.gfx = kibble(15, this.size);
    this.gfx.translate(Math.random() * g_width, Math.random() * g_height);
    this.speed =  Math.random();
    this.angle = Math.random() * 360;
    this.rotation = Math.random();
  };
  Asteroid.prototype = {
    think: function() {
      var rotation = (this.angle / 180) * Math.PI;
      var x = Math.cos(rotation) * this.speed;
      var y = Math.sin(rotation) * this.speed;
      this.gfx.translate(x, y);
      this.gfx.rotate(this.rotation);

      var bbox = this.gfx.getBBox();
      if(bbox.x < 0) {
        this.gfx.translate(g_width, 0);
      } else if(bbox.x > g_width) {
        this.gfx.translate(-g_width, 0);
      }
      if(bbox.y < 0) {
        this.gfx.translate(0, g_height);
      } else if(bbox.y > g_height) {
        this.gfx.translate(0, -g_height);
      }
    }
  }

  // Spaceship, with the path for the spaceship knocked up quickly using illustrator
  var Spaceship = function() {
    this.gfx = paper.set();
    this.gfx.push(paper.path('M30 15L0 30L0 0L30 15'));
    // Spaceship drawn up in illustrator, looks cool but not as camp as the basic triangle
    //this.gfx.push(paper.path('M5.802 5.802L14.612 0L20.307 5.802L20.307 5.802L29.01 5.802L37.713 11.604L20.307 11.604L20.307 14.505L46.416 14.505L52.218 17.406L66.723 17.406L84.129 21.758L66.723 26.109L52.218 26.109L46.416 29.01L20.307 29.01L20.307 31.911L37.713 31.911L37.713 31.911L29.01 37.713L20.307 37.713L14.505 43.515L5.802 37.713L5.802 31.911L8.703 31.911L8.703 29.01L5.802 29.01L5.802 26.109L0 26.109L0 17.406L5.802 17.406L5.802 14.505L8.703 14.505L8.703 11.604L5.802 11.604L5.802 5.802'));
    this.gfx.scale(0.5);
    this.gfx.translate(Math.random() * g_width, Math.random() * g_height);
    this.rotation = 0;
    this.speed = 0;
    this.accel = 0.1;
    this.rotation_speed = 6;
    this.max_speed = 10;
    this.health = 100;
    this.momentum = {x: 0, y: 0};
  }
  Spaceship.prototype = {
    alive: function() {
      return this.health > 0;
    },
    turn_left: function() {
      this.rotate(this.rotation_speed);
    },
    turn_right: function() {
      this.rotate(-this.rotation_speed);
    },
    rotate: function(amount) {
      this.gfx.rotate(amount);
      this.rotation += amount
      if(this.rotation < 0) {
        this.rotation = 359;
      } else if(this.rotation > 359) {
        this.rotation = 0;
      }
    },
    accelerate: function() {
      var rotation = (this.rotation / 180) * Math.PI;
      this.momentum.x += Math.cos(rotation) * this.accel;
      this.momentum.y += Math.sin(rotation) * this.accel;
    },
    decelerate: function() {
      var rotation = (this.rotation / 180) * Math.PI;
      this.momentum.x += Math.cos(rotation) * -this.accel;
      this.momentum.y += Math.sin(rotation) * -this.accel;
    },
    think: function() {
      this.gfx.translate(this.momentum.x, this.momentum.y);

      var bbox = this.gfx.getBBox();
      if(bbox.x < 0) {
        this.gfx.translate(g_width, 0);
      } else if(bbox.x > g_width) {
        this.gfx.translate(-g_width, 0);
      }
      if(bbox.y < 0) {
        this.gfx.translate(0, g_height);
      } else if(bbox.y > g_height) {
        this.gfx.translate(0, -g_height);
      }
    },
    fire: function() {
      if(this.alive() && bullets.length < 5) {
        var bbox = this.gfx.getBBox();
        var pos = middle(bbox);

        var rotation = (this.rotation / 180) * Math.PI;
        var shiplength = bbox.width / 2;
        pos.x += Math.cos(rotation) * shiplength;
        pos.y += Math.sin(rotation) * shiplength;

        bullets.push(new Missile(pos.x, pos.y, this.rotation));
      }
    }
  }

  // World collections
  var spaceship = new Spaceship();
  var asteroids = [];
  var bullets = [];
  var explosions = [];
  var score = 0;
  var scoretxt = paper.text(30, 20, '0');

  // Handle user input
  $('body').keypress(function(event) {
    if(event.charCode == 119) {
      spaceship.accelerate();
    } else if(event.charCode == 100) {
      spaceship.turn_left();
    } else if(event.charCode == 97) {
      spaceship.turn_right();
    } else if(event.charCode == 115) {
      spaceship.decelerate();
    } else if(event.charCode == 113) {
      spaceship.fire();
    }
  });

  // Game loop
  var gameLoop = function() {
    if(spaceship.alive()) {
      spaceship.think();
    }

    // Manage the bullets
    $(bullets).each(function(index, bullet) {
      // Whenever a bullet dies, it's think function returns false
      if(!bullet.think()) {
        bullets.splice(index, 1);
        delete bullet;
      }
    });

    // Manage explosions
    $(explosions).each(function(index, explosion) {
      if(!explosion.think()) {
        explosions.splice(index, 1);
        delete explosion;
      }
    });

    // Manage all the asteroids
    $(asteroids).each(function(aindex, asteroid) {
      asteroid.think();
      var abbox = asteroid.gfx.getBBox();

      // See if any bullets have collided with asteroids
      $(bullets).each(function(bindex, bullet) {
        var bbox = bullet.gfx.getBBox();
        
        if(collision(bbox, abbox, asteroid.size * 0.7)) {

          var pos = middle(abbox);
          explosions.push(new Explosion(pos.x, pos.y, asteroid.size));

          asteroids.splice(aindex, 1);
          asteroid.gfx.hide();
          delete asteroid;

          bullet.gfx.hide();
          bullets.splice(bindex, 1);
          delete bullet;

          // Increase the score
          score += parseInt(asteroid.size);
        }
      });

      // See if the spaceship has collided with an asteroid
      if(spaceship.alive()) {
        var sbox = spaceship.gfx.getBBox();
        if(collision(sbox, abbox, (30 + asteroid.size) * 0.6)) {
          var pos = middle(sbox);
          explosions.push(new Explosion(pos.x, pos.y, 30));
          spaceship.gfx.hide();
          spaceship.health = 0;
          paper.text(100, 150, 'GAME OVER');
        }
      }
    });

    // Keep asteroids topped up
    if(asteroids.length < 8) {
      var asteroid = new Asteroid();
      var abox = asteroid.gfx.getBBox();
      var sbox = spaceship.gfx.getBBox();
      // If this asteroid would spawn on top of the spaceship, forget about it
      if(!collision(abox, sbox, (100 + asteroid.size))) {
        asteroid.speed *= (score / 100);
        asteroids.push(asteroid);
      } else {
        asteroid.gfx.hide();
        delete asteroid;
      }
    }

    // Update the score
    scoretxt.attr({text: score});
  }

  // Set the game loop to run
  setInterval('gameLoop()', 50);
