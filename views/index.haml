!!! Strict
%html
  %head
    %title jsteroids
    %script{:src => './raphael-min.js'}
    %script{:src => './jquery-1.4.4.min.js'}
%style
  :sass
    h1, p, a, ul
      color: #fff
      font-family: 'Helvetica'
      margin: 0 auto
      margin-top: 1em
      width: 600px

    body
      background: black

    #canvas
      margin: 0 auto
      width: 800px
      height: 600px
      text-align: center
      background: white
      -moz-border-radius: 4px
      -webkit-border-radius: 4px

    ul
      list-style: none
      padding: 0
      li
        margin: 0 0.5em
        display: inline-block
      

%body
  %h1 jsteroids
  %p Asteroids clone written in Javascript with the Raphaël—JavaScript Library and jQuery.
  %br
  #canvas
  %p
    %a{:href => 'http://github.com/excepttheweasel/jsteroids'} Full source code

:javascript
  var g_width = 800;
  var g_height = 600;
  var paper = Raphael('canvas', g_width, g_height);

  // Find the middle of a box
  function middle(box) {
    return {x: box.x + (box.width / 2), y: box.y + (box.height / 2)};
  }

  // Calculate if two boxes are colliding
  function collision(box1, box2, radius) {
    var middle1 = middle(box1);
    var middle2 = middle(box2);
    var length = Math.sqrt(Math.pow(middle2.x - middle1.x, 2) + Math.pow(middle2.y - middle1.y, 2));
    return length < radius;
  }

  // Generate a rough edges circular style shape (explosion, asteroid etc)
  // using SVG path notation format
  function kibble(points, size) {
    var path = 'M';
    var firstx, firsty;
    for(var angle = 0; angle <= Math.PI * 2; angle += (Math.PI / points)) {
      var radius = (size * 0.3) + Math.random() * (size * 0.7);
      var x = Math.cos(angle) * radius;
      var y = Math.sin(angle) * radius;
      if(angle == 0) {
        firstx = x;
        firsty = y;
        path += x + ' ' + y;
      } else {
        path += 'L' + x + ' ' + y;
      }
    }
    path += 'L' + firstx + ' ' + firsty;
    return paper.path(path);
  }

  // Wrap a graphic that has gone off the screen
  function edgewrap(gfx) {
    var bbox = gfx.getBBox();
    if(bbox.x < 0) {
      gfx.translate(g_width, 0);
    } else if(bbox.x > g_width) {
      gfx.translate(-g_width, 0);
    }
    if(bbox.y < 0) {
      gfx.translate(0, g_height);
    } else if(bbox.y > g_height) {
      gfx.translate(0, -g_height);
    }
  }

  // Missiles!
  var Missile = function() {
    this.alive = false;
  };
  Missile.prototype = {
    spawn: function(posx, posy, shipxvec, shipyvec, xvec, yvec) {
      this.gfx = paper.circle(posx, posy, 3);
      var speed = 15;
      this.xvec = xvec * speed + shipxvec;
      this.yvec = yvec * speed + shipyvec;
      this.alive = true;
    },
    die: function() {
      this.alive = false;
      this.gfx.hide();
      delete this.gfx;
    },
    think: function() {
      this.gfx.translate(this.xvec, this.yvec);

      var bbox = this.gfx.getBBox();
      if(bbox.x < 0 || bbox.x > g_width || bbox.y < 0 || bbox.y > g_height) {
        this.die();
        return false;
      }
      return true;
    }
  };

  // Explosions
  var Explosion = function(x, y, size) {
    this.bitcount = 3 + Math.random() * 7;
    this.shards = [];
    for(var index = 0; index < this.bitcount; index++) {
      var shard = {
        gfx: kibble(Math.random() * 5, size / 2),
        angle: Math.random() * Math.PI * 2,
        speed: Math.random() * 5,
      }
      // Positon the shards around the interior of the asteroid
      var angle = Math.random() * (Math.PI * 2);
      shard.gfx.translate(x + Math.cos(angle) * (size / 2), y + Math.sin(angle) * (size / 2));
      this.shards.push(shard);
    }
    this.lifetime = (size * 0.6) + Math.random() * (size * 0.4);
    this.life = this.lifetime;
  }
  Explosion.prototype = {
    think: function() {
      if(this.life-- > 0) {
        var color = parseInt(250 * (1 - (this.life / this.lifetime)));
        $(this.shards).each(function(index, shard) {
          var x = Math.cos(shard.angle) * shard.speed;
          var y = Math.sin(shard.angle) * shard.speed;
          shard.gfx.translate(x, y);
          shard.gfx.attr({stroke: "rgb(" + color + ", " + color + ", " + color + ")"});
        });
        return true;
      } else {
        $(this.shards).each(function(index, shard) {
          shard.gfx.hide();
        });
      }
      return false;
    }
  };

  // Asteroids
  var Asteroid = function() {
    this.alive = false;
  };
  Asteroid.prototype = {
    spawn: function(speed) {
      this.size = 20 + Math.random() * 50;
      this.gfx = kibble(8, this.size);
      this.gfx.translate(Math.random() * g_width, Math.random() * g_height);
      this.rotation = Math.random();
      var angle = Math.random() * Math.PI * 2;
      // Add a bit of randomness to the asteroid speed
      speed *= Math.random();
      this.xvec = Math.cos(angle) * speed;
      this.yvec = Math.sin(angle) * speed;
      this.alive = true;
    },
    die: function() {
      this.alive = false;
      this.gfx.hide();
      delete this.gfx;
    },
    think: function() {
      this.gfx.translate(this.xvec, this.yvec);
      this.gfx.rotate(this.rotation);
      edgewrap(this.gfx);
    }
  }

  // Spaceship, with the path for the spaceship knocked up quickly using illustrator
  var Spaceship = function() {
    this.gfx = paper.set();
    this.gfx.push(paper.path('M30 15L0 30L0 0L30 15'));
    this.gfx.scale(0.5);
    this.gfx.translate(Math.random() * g_width, Math.random() * g_height);
    this.rotation = 0;
    this.speed = 0;
    this.accel = 0.1;
    this.rotation_speed = 0.16;
    this.max_speed = 10;
    this.alive = true;
    this.momentum = {x: 0, y: 0};
    this.controls = {accel: false, decel: false, left: false, right: false, fire: false};
    this.fired = false;
  }
  Spaceship.prototype = {
    setcontrol: function(controls) {
      this.controls = $.extend({}, this.controls, controls);
    },
    turn_left: function() {
      this.rotate(this.rotation_speed);
    },
    turn_right: function() {
      this.rotate(-this.rotation_speed);
    },
    rotate: function(amount) {
      this.gfx.rotate((amount * 180) / Math.PI);
      this.rotation += amount
    },
    accelerate: function() {
      this.momentum.x += Math.cos(this.rotation) * this.accel;
      this.momentum.y += Math.sin(this.rotation) * this.accel;
    },
    decelerate: function() {
      this.momentum.x += Math.cos(this.rotation) * -this.accel;
      this.momentum.y += Math.sin(this.rotation) * -this.accel;
    },
    think: function() {
      // Handle the controls
      if(this.controls.accel) {
        this.accelerate();
      }
      if(this.controls.decel) {
        this.decelerate();
      }
      if(this.controls.left) {
        this.turn_left();
      }
      if(this.controls.right) {
        this.turn_right();
      }
      if(this.controls.fire) {
        if(!this.fired) {
          this.fire();
          this.fired = true;
        }
      } else {
        this.fired = false;
      }

      this.gfx.translate(this.momentum.x, this.momentum.y);
      edgewrap(this.gfx);
    },
    die: function() {
      this.gfx.hide();
      delete this.gfx;
      this.alive = false;
    },
    fire: function() {
      if(this.alive) {
        var bbox = this.gfx.getBBox();
        var pos = middle(bbox);

        // Calculate the vector of the missile relative to the ship
        var xvec = Math.cos(this.rotation);
        var yvec = Math.sin(this.rotation);

        // Calculate the position of the nose of the ship
        var shiplength = bbox.width / 2;
        pos.x += xvec * shiplength;
        pos.y += yvec * shiplength;

        // Find a dead missile in the list and respawn it
        var spaceship = this;
        $(missiles).each(function(index, missile) {
          if(!missile.alive) {
            missile.spawn(pos.x, pos.y, spaceship.momentum.x, spaceship.momentum.y, xvec, yvec);
            return false;
          }
        });
      }
    }
  }

  // World collections
  var spaceship = new Spaceship();

  var score = 0;
  var scoretxt = paper.text(50, 20, 'Score: 00000000');

  var asteroids = [];
  for(var index = 0; index < 8; index++) {
    asteroids.push(new Asteroid());
  }

  var explosions = [];
  var missiles = [];
  for(var index = 0; index < 30; index++) {
    missiles.push(new Missile());
  }

  // Handle user input
  function setcontrol(event, active) {
    if(event.which == 87 || event.which == 38) {
      spaceship.setcontrol({accel: active});
    } else if(event.which == 83 || event.which == 40) {
      spaceship.setcontrol({decel: active});
    } else if(event.which == 68 || event.which == 39) {
      spaceship.setcontrol({left: active});
    } else if(event.which == 65 || event.which == 37) {
      spaceship.setcontrol({right: active});
    } else if(event.which == 81 || event.which == 32) {
      spaceship.setcontrol({fire: active});
    }
  }
  $(document).keydown(function(event) {
    setcontrol(event, true);
  });
  $(document).keyup(function(event) {
    setcontrol(event, false);
  });

  // Game loop
  var gameLoop = function() {

    // Manage the spaceship
    if(spaceship.alive) {
      spaceship.think();
    }

    // Manage explosions
    $(explosions).each(function(index, explosion) {
      if(!explosion.think()) {
        explosions.splice(index, 1);
        delete explosion;
      }
    });

    // Do thinking for all missiles
    $(missiles).each(function(index, missile) {
      if(missile.alive) {
        missile.think();
      }
    });

    // Manage all the asteroids
    $(asteroids).each(function(index, asteroid) {
      if(asteroid.alive) {
        asteroid.think();

        var abbox = asteroid.gfx.getBBox();

        // See if any missiles have collided with asteroids
        $(missiles).each(function(mindex, missile) {
          if(missile.alive) {
            var bbox = missile.gfx.getBBox();
            
            if(collision(bbox, abbox, asteroid.size * 0.7)) {

              var pos = middle(abbox);
              explosions.push(new Explosion(pos.x, pos.y, asteroid.size));

              asteroid.die();
              missile.die();

              // Increase the score
              score += parseInt(asteroid.size);
            }
          }
        });

        // See if the spaceship has collided with an asteroid
        if(spaceship.alive) {
          var sbox = spaceship.gfx.getBBox();
          if(collision(sbox, abbox, asteroid.size * 0.7)) {
            var pos = middle(sbox);
            explosions.push(new Explosion(pos.x, pos.y, 30));
            spaceship.die();
            paper.text(100, 150, 'GAME OVER'); }
        }
      } else {
        // Base asteroid speed on the score
        asteroid.spawn(score * 0.01);

        // Keep moving the asteroid if it is too close to the spaceship
        var sbox = spaceship.gfx.getBBox();
        var abox = null;
        do {
          abox = asteroid.gfx.getBBox();
          this.gfx.translate(Math.random() * g_width, Math.random() * g_height);
        } while(collision(abox, sbox, (70 + asteroid.size)));
      }
    });

    // Update the score
    scoretxt.attr({text: "Score: " + score});
  }

  // Set the game loop to run at roughly 30fps 
  setInterval('gameLoop()', 33);
